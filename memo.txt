2023-12-12 화요일
```
$ npm install @nestjs/config
.env 파일 생성
.gitignore 수정
app.module.ts 수정
```

2023-12-13 수요일
```
1. 서버 가동 시 포트 번호 로그로 출력되는 부분 추가

2. hot reload를 위한 webpack 패키지 설치
$ npm i --save-dev webpack-node-externals run-script-webpack-plugin webpack

root 디렉토리에 webpack-hmr.config.js 파일 생성
main.ts 수정
package.json 수정
```

2023-12-14 목요일
```
1. users 모듈, 컨트롤러, 서비스 파일 생성
$ nest generate module users
$ nest generate controller users
$ nest generate service users

2. typeorm 설치, rds 연결(mysql)
$ npm install @nestjs/typeorm typeorm mysql2
root 디렉토리 dataSource.ts 파일 생성
```

2023-12-15 금요일
```
1. swagger 패키지 설치
$ npm install --save @nestjs/swagger

main.ts에 swagger 설정 부분 추가

```

2023-12-16 토요일
```
1. 회원가입 관련 dto 생성(signup.request.dto)
2. users 컨트롤러 내용 추가
3. swagger 데코레이터 추가 
4. 사용자에게 반환되는 내용의 형식을 지정하는 dto 생성(user.dto.ts)
```

2023-12-17 일요일
```
jwt 토큰 데코레이터 생성
```

2023-12-18 월요일
```
undefinedToNull.interceptor.ts 생성
컨트롤러 실행 후 리턴하는 데이터가 undefined라면 이 데이터를 null로 변경하고,
데이터가 undefined가 아니라면 data를 그대로 리턴한다.
```

2023-12-19 화요일
```
typeorm에서 쓰기 위해 엔터티를 만들었다면
이에 관한 dto는 별도로 만들 필요가 없다.
nestjs에선 entity 클래스 또한 dto로써 사용할 수 있기 때문이다.

1. users.entity.ts 생성
우선 세션을 통한 로그인, 그 뒤에 jwt를 통한 로그인을 테스트할 예정이기에
우선적으로 users.entity.ts 만 생성하였다.

2. app.module.ts에 typeOrmModule 관련 설정 추가
ormconfig.ts는 typeorm 0.2 버전 용이기에 사용하지 않고 app.module.ts에서 직접 사용한다.

3. typeorm 관리 패키지 설치
$ npm install typeorm-extension

4. package.json에 typeorm 관련 명령어 추가
"typeorm": "ts-node --require tsconfig-paths/register ./node_modules/typeorm/cli.js",
"db:create": "ts-node ./node_modules/typeorm-extension/bin/cli.cjs db:create -d ./dataSource.ts",
"db:drop": "ts-node ./node_modules/typeorm-extension/bin/cli.cjs db:drop -d ./dataSource.ts",
"seed": "ts-node ./node_modules/typeorm-extension/bin/cli.cjs seed:run -d ./dataSource.ts",
"schema:drop": "ts-node ./node_modules/typeorm/cli.js schema:drop",
"schema:sync": "ts-node ./node_modules/typeorm/cli.js schema:sync",
"db:migrate": "npm run typeorm migration:run -- -d ./dataSource.ts",
"db:migrate:revert": "npm run typeorm migration:revert -- -d ./dataSource.ts",
"db:create-migration": "npm run typeorm migration:create -- ./src/migrations/",
"db:generate-migration": "npm run typeorm migration:generate -- ./src/migrations -d ./dataSource.ts"

seeding과 migrations은 사용하지 않을 것 같지만 일단 추가하였다.
바로 package.json에 typeorm 명령어를 추가하고 DB부터 연결할 계획이다.

5. dataSource.ts 생성
typeorm-extension은 app.module/typeOrmModule의 내용을 직접 읽지 못한다.
typeOrmModule의 내용을 dataSource.ts에도 적어준다.

6. tsconfig.json 수정
"esModuleInterop": true 옵션 등록
https://ctrs.tistory.com/521

이후 DB 생성 확인

```

2023-12-20 수요일
```
- DB 생성
$ npm run db:create

- DB 삭제
$ npm run db:drop

- 테이블 생성
app.module.ts에서 synchronize 옵션을 true로 변경 후
$ npm run start:dev
or
$ npm run schema:sync

- 테이블 삭제 (모든 테이블이 삭제되므로 주의)
$ npm run schema:drop

- seeding(초기 데이터 생성)
$ npm run seed

엔티티 파일에서 컬럼 데코레이터 @Column의 옵션 중에는
select:boolean이 있는데, 이는
'select * from users' 쿼리의 결과에 포함되지 않는다는 설정이다
'select password from users'와 같이 컬럼명을 명시적으로 적어주어야만 내용이 출력된다.
default는 true이다.

----------------------------------------------------------



1. SignUpRequestDto 내용을 users.entity에서 pickType으로 가져오도록 변경

2. 패스워드 암호화 라이브러리 bcrypt 설치
$ npm install bcrypt

3. service에 Users 엔티티에 대한 의존성 주입
users.module.ts와 app.module.ts의 imports에
TypeOrmModule.forFeature([Users]) 추가

4. exception filter 생성
예를 들어 필요한 파라미터가 들어오지 않았을 경우의 에러처리를 할 때
보통 throw new Error()로 진행하지만
이 경우 이 에러의 로그가 서버 터미널에서는 출력되나
사용자(요청자) 입장에서는 201 Created라고 나온다.
기본적으로는 서버가 사용자에게 에러 내용을 공유하지 않기 때문이다.
이를 해결하기 위해 에러 내용을 사용자에게 보여줄 exception filter를 생성

5. class validator 설치(파이프)
$ npm install class-validator
$ npm install class-transformer
class-transformer는 class-validator와 세트인 라이브러리
설치해달라는 에러 메세지가 나오므로 설치

[참고] 사용 가능한 클래스 밸리데이터 데코레이터의 목록
https://github.com/typestack/class-validator

6. main.ts에 익셉션 필터와 파이프(class validator) 사용 선언
app.useGlobalPipes(new ValidationPipe());
app.useGlobalFilters(new HttpExceptionFilter());


회원가입 기능 작성 후 DB에 내용이 등록되는 것 까지 확인

※ 인터셉터는 컨트롤러와 서비스의 앞뒤에서 실행되고, 
익셉션 필터는 컨트롤러 뒤에서만 실행된다.

```

2023-12-21 목요일
```
1. 가드 사용
users.controller의 로그인 api에서
@UseGaurds() 데코레이터 사용

가드는 nestjs의 라이프 사이클 상 미들웨어와 인터셉터 사이에서 사용되며,
주어진 요청에 대한 authorization(승인 및 권한 부여)와 authentication(인증)에 대한 역할을 수행한다.

데이터가 제대로 들어가있는지 체크할 수도 있지만,
주요 목적은 컨트롤러에 접근하기 전에 권한이 있는지 확인하는 것

제대로 로그인 한 상태인지, 아니라면 
401 Unauthorized, 403 Forbidden 에러 발생 등을 담당한다.

2. passport 설치
$ npm install passport passport-local
passport는 node.js 인증 라이브러리
JWT와 세션 둘 다 가능

passport-local은 이메일과 비밀번호로 로그인할때 쓰임

$ npm install @nestjs/passport
@nestjs/passport는 nestjs용으로 모듈화 된 passport

3. 커스텀 가드 생성
/src/auth/local-auth.guard.ts

4. 인증 전략 생성
/src/auth/local.strategy.ts

5. auth.service 생성, DB에 접근하기 위한 용도
/src/auth/auth.service.ts

6. local.serializer 생성
/src/auth/local.serializer.ts

7. 위 내용들을 묶어줄 모듈 생성
/src/auth/auth.module.ts

인증 절차
local-auth.gaurt.ts -> local.strategy.ts -> auth.service.ts
-> local.strategy.ts -> local.serializer.ts

8. cookie parser, express session 설치
$ npm install cookie-parser express-session

9. main.ts
패스포트 사용 선언

모듈에 넣을때, 
@Injectable()이 붙었으면 provider,
남의 모듈이면 imports,
컨트롤러는 controller,
서비스는 service,
남에게 자신의 모듈을 제공할 예정이라면 exports

이렇게 작성해주었으나 로그인에 이상이 발생
제대로 이메일과 패스워드를 입력해 주었으나 아래와 같은 에러가 발생
401 { message: 'Unauthorized', statusCode: 401 }

해결 방안 탐색 중..
```

2023-12-22 금요일
```
1. 로거 미들웨어 생성
로그인이 되지 않는 문제가 무엇인지 확인하기 위해서
/src/common/middlewares/logger.middleware.ts

2. app.module.ts에 모든 라우트에 대하여
LoggerMiddleware를 사용하겠다고 선언

하지만 '[HTTP] POST /api/users/login 401 50 - PostmanRuntime/7.36.0 ::1' 라는 내용 뿐
더 자세한 내용은 나오지 않았음
다른 방법을 찾아봐야 할 듯

회원가입 부분에서 패스워드를 암호화 하는 부분과
로그인 부분에서 패스워드를 암호화하여 DB에 저장된 패스워드가 일치하는지 확인하는 부분을 다시 확인해보자
-> X 이 문제가 아니었음

local-strategy에서 상위 함수를 사용하는 부분
super({ usernameFiled: 'email', passwordFiled: 'password' })에서 오타가 나서 발생한 문제,
'usernameField', 'passwordField'를 'usernameFiled', 'passwordfiled'라고 적어서 발생한 문제였음..

정리: https://ctrs.tistory.com/523

3. logged in, not logged in guard 생성
/src/auth/logged-in.guard.ts
/src/auth/not-logged-in.guard.ts
현재 사용자가 로그인 한 상태인지 아닌지 확인하는 가드

LoggedInGuard 가드가 데코레이터로 붙은 api는
로그인 한 사용자만 사용 가능
로그인하지 않은 사용자가 접근시 403 Forbidden 에러 발생
현재 logOut()에 적용됨

NotLoggedInGuard 가드가 데코레이터로 붙은 api는
로그인하지 않는 사용자만 사용 가능
현재 signUp()에 적용됨

4. users.controller.ts
@Req 대신 @Users, @Res 대신 @Response로 변경

```

2023-12-22 금요일
```
Users 엔티티에 isAdmin 컬럼 추가
최초에 admin 계정을 생성하는 'admin-user-seed.ts' 생성
/src/database/seeds/admin-user-seed.ts

```